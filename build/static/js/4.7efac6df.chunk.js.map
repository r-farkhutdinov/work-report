{"version":3,"sources":["utils/dates/isHoliday.ts","services/getReport.ts","utils/dates/getDatesInRange.ts","components/DatePickerDayjs/index.tsx","components/ReportDownload/index.tsx","pages/Report/ConfigPanel/styles.ts","pages/Report/ConfigPanel/index.tsx","pages/Report/ConfigPanel/constants.ts","pages/Report/styles.ts","pages/Report/Names/styles.ts","pages/Report/Names/index.tsx","pages/Report/index.tsx"],"names":["isHoliday","date","day","MONTH","getReport","month","names","dates","start","end","d","Date","push","dayjs","setDate","getDate","getDatesInRange","startOf","toDate","endOf","headers","label","key","map","format","data","name","forEach","row","DatePickerDayjs","generatePicker","dayjsGenerateConfig","ReportDownload","filename","SpaceStyled","styled","Space","ConfigPanel","setMonth","useState","file","setFile","value","onChange","v","picker","e","target","prefix","FileOutlined","placeholder","addonAfter","ReportContentStyled","div","ReportTitleStyled","h2","NamesContentStyled","NameEntryStyled","UserOutlinedStyled","UserOutlined","Names","setNames","Group","defaultValue","checkedValues","Report","namesJSON","report","useMemo","previewColumns","column","dataIndex","title","previewRows","console","log","size","columns","dataSource","pagination"],"mappings":"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","file":"static/js/4.7efac6df.chunk.js","sourcesContent":["import { Dayjs } from 'dayjs';\n\nexport const isHoliday = (date: Dayjs) => date.day() === 0 || date.day() === 6;\n","import { Dayjs } from 'dayjs';\nimport { getDatesInRange } from '../utils/dates/getDatesInRange';\nimport { isHoliday } from '../utils/dates/isHoliday';\n\nconst MONTH = 'month';\n\nexport interface ReportResult {\n  data: Record<string, string>[];\n  headers: { label: string; key: string }[];\n  dates: Dayjs[];\n}\n\nexport const getReport = (month: Dayjs, names: string[]): ReportResult => {\n  const startOf = month.startOf(MONTH).toDate();\n  const endOf = month.endOf(MONTH).toDate();\n\n  const dates = getDatesInRange(startOf, endOf);\n\n  const headers = [\n    { label: 'Name', key: 'name' },\n    ...dates.map((date) => ({\n      label: date.format('DD'),\n      key: date.format('DD'),\n    })),\n  ];\n\n  const data: Record<string, string>[] = names.map((name) => ({ name }));\n\n  data.forEach((row) => {\n    for (let date of dates) {\n      row[date.format('DD')] = isHoliday(date) ? 'x' : '+';\n    }\n  });\n\n  return {\n    data,\n    headers,\n    dates,\n  };\n};\n","import dayjs, { Dayjs } from 'dayjs';\n\nexport const getDatesInRange = (start: Date, end: Date): Dayjs[] => {\n  const d = new Date(start);\n\n  const dates = [];\n\n  while (d <= end) {\n    dates.push(dayjs(new Date(d)));\n    d.setDate(d.getDate() + 1);\n  }\n\n  return dates;\n};\n","import { Dayjs } from 'dayjs';\nimport dayjsGenerateConfig from 'rc-picker/lib/generate/dayjs';\nimport generatePicker from 'antd/es/date-picker/generatePicker';\nimport 'antd/es/date-picker/style/index';\n\nconst DatePickerDayjs = generatePicker<Dayjs>(dayjsGenerateConfig);\n\nexport default DatePickerDayjs;\n","import { FC } from 'react';\nimport { CSVLink } from 'react-csv';\nimport { ReportDownloadProps } from './interfaces';\n\nexport const ReportDownload: FC<ReportDownloadProps> = ({\n  data,\n  headers,\n  filename,\n}) => {\n  return (\n    <CSVLink filename={filename} data={data} headers={headers}>\n      Download report\n    </CSVLink>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Space } from 'antd';\n\nexport const SpaceStyled = styled(Space)`\n  background: #f3f3f3;\n  border-radius: 10px;\n  width: 100%;\n  padding: 20px 30px;\n  margin-bottom: 20px;\n`;\n","import { Input } from 'antd';\nimport { Dayjs } from 'dayjs';\nimport { ChangeEvent, FC } from 'react';\nimport DatePickerDayjs from '../../../components/DatePickerDayjs';\nimport { ReportDownload } from '../../../components/ReportDownload';\nimport { DEFAULT_PICKER_GRANULARITY } from './constants';\nimport { ConfigPanelProps } from './interfaces';\nimport { SpaceStyled } from './styles';\nimport { FileOutlined } from '@ant-design/icons';\nimport { useState } from 'react';\n\nexport const ConfigPanel: FC<ConfigPanelProps> = ({\n  data,\n  headers,\n  month,\n  setMonth,\n}) => {\n  const [file, setFile] = useState<string>(month.format('Отчет_MMMM'));\n\n  const onMonthChange = (v: Dayjs | null) => v && setMonth(v);\n\n  const onFileNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setFile(e.target.value || '');\n  };\n\n  return (\n    <SpaceStyled>\n      <DatePickerDayjs\n        value={month}\n        onChange={onMonthChange}\n        picker={DEFAULT_PICKER_GRANULARITY}\n      />\n      <Input\n        value={file}\n        onChange={onFileNameChange}\n        prefix={<FileOutlined />}\n        placeholder='File name'\n        addonAfter='.csv'\n      />\n      {data ? (\n        <ReportDownload filename={file} data={data} headers={headers} />\n      ) : (\n        'No report'\n      )}\n    </SpaceStyled>\n  );\n};\n","export const DEFAULT_PICKER_GRANULARITY = 'month';\n","import styled from '@emotion/styled';\n\nexport const ReportContentStyled = styled.div`\n  padding: 20px 30px;\n`;\n\nexport const ReportTitleStyled = styled.h2`\n  margin: 0 0 15px;\n  font-size: 24px;\n`;\n","import styled from '@emotion/styled';\nimport { UserOutlined } from '@ant-design/icons';\n\nexport const NamesContentStyled = styled.div`\n  background: #f3f3f3;\n  border-radius: 10px;\n  width: 100%;\n  padding: 20px 30px;\n  margin-bottom: 20px;\n`;\n\nexport const NameEntryStyled = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 5px 0;\n`;\n\nexport const UserOutlinedStyled = styled(UserOutlined)`\n  margin-right: 5px;\n`;\n","import { Checkbox } from 'antd';\nimport { FC } from 'react';\nimport { NamesProps } from './interfaces';\nimport {\n  NameEntryStyled,\n  NamesContentStyled,\n  UserOutlinedStyled,\n} from './styles';\n\nexport const Names: FC<NamesProps> = ({ names, setNames }) => {\n  const onSelectionChange = (checkedValues: any[]) => {\n    setNames(checkedValues);\n  };\n\n  return (\n    <NamesContentStyled>\n      <Checkbox.Group defaultValue={names} onChange={onSelectionChange}>\n        {names.map((name) => (\n          <NameEntryStyled key={name}>\n            <Checkbox value={name}>{name}</Checkbox>\n            <UserOutlinedStyled />\n          </NameEntryStyled>\n        ))}\n      </Checkbox.Group>\n    </NamesContentStyled>\n  );\n};\n","import { Table } from 'antd';\nimport dayjs from 'dayjs';\nimport { useState } from 'react';\nimport { getReport, ReportResult } from '../../services/getReport';\n\nimport { ConfigPanel } from './ConfigPanel';\nimport { ReportContentStyled, ReportTitleStyled } from './styles';\nimport namesJSON from '../../names.json';\nimport { Names } from './Names';\nimport { useMemo } from 'react';\n\nconst Report: React.FC = () => {\n  const [month, setMonth] = useState(dayjs());\n\n  const [names, setNames] = useState<string[]>(namesJSON);\n\n  const report: ReportResult = useMemo(() => getReport(month, names), [\n    month,\n    names,\n  ]);\n\n  const previewColumns = report.headers.map((column) => ({\n    dataIndex: column.key,\n    title: column.label,\n  }));\n\n  const previewRows = report.data.map((row, key) => ({ ...row, key }));\n\n  console.log(previewRows);\n\n  return (\n    <ReportContentStyled>\n      <ReportTitleStyled>Report configuration</ReportTitleStyled>\n      <ConfigPanel\n        data={report?.data}\n        headers={report?.headers}\n        month={month}\n        setMonth={setMonth}\n      />\n      <ReportTitleStyled>Names to include</ReportTitleStyled>\n\n      <Names names={namesJSON} setNames={setNames} />\n      <ReportTitleStyled>Preview</ReportTitleStyled>\n      <Table\n        size='small'\n        columns={previewColumns}\n        dataSource={previewRows}\n        pagination={false}\n      />\n    </ReportContentStyled>\n  );\n};\n\nexport default Report;\n"],"sourceRoot":""}